February 14, 2011
This is the point at which I'll be creating a 3d opengl(more likely OGRE3d) implementation of the game. At the same time this will also move it out of flash, making it possible to develop without that tool. At the same time I'll continue to develop the flash version at work, until the license is taken away. This allows me to plan the logic there and I can just worry about learning how to render at home.

May 14, 2011
Bringing the project into Unity is a foolish proposition. I have no models or 3d experience to make some. The best solution at this point is to use XNA and the direct drawing commands it has, to port the 2d game. With this I can keep the same logic and apply an actual class structure. I can clean up code a lot this way. Also there isn't that high barrier of 3d models. I can come to terms with that slowly. the big first thing is wrapping myself around the proper game loop. I understand it in theory but now I can feel it through practice. I hope to complete this project by months end or very soon after accquiring a home office. Perhaps the ability to physically seperate my after work projects from my entertainment will help me focus more on both.

I'll begin by porting the logic. If I can get the game to play the way it used to, even with basic coloured triangles, then I have a victory. This is where I hope to be by next weekend if not the end of the month. Then the work can begin to turn it into something resembling a game again. I think as I bring in different levels of rendering one at a time, it'll help me learn rendering on a deeper level than I've been able to. Currently I have too much pressure to make it look good all at once, and that won't help when this is purely a learning project.

Once I understand the core rendering concepts I can expand the game a bit and maybe bring in some reusable parts. If I make multiple levels that are selectable from a menu, that'll force me to create a menu system, and also a system to load maps from text files. If I expand that enough I could use it on the D&D project for movement.

I think this will be a much better experience and more productive than the Unity attempt.

May 26th, 2011
In attempting to motivate myself I've set goals in my calendar application. The issue is that life interjects itself and so the tight timeline I had caused undue stress. So now insted of a haphazard set of calendar tasks, I've fully laid out sprints with tasks in a text file. No hard dates set, just a list of what needs to get done in small, doable chunks. This let me plan ahead quite a bit more than I had with specific dates, since I don't have to think in set week to two week chunks. I just think of it in phases and features and what It takes to reach them. If I want to set a timeline on myself I'm not sure how I'd go about it or if thats a good idea.

After moving next week I can get back to work, but for now I need to recharge and study a bit more. I'll have an office so the first thing will be to set that up and get a bit more organization to work. As silly as the overzealous agile people can get there are good ideas in there. The one I'm thinking of first, was an idea we used during a small experimental project at work last summer. Take the planned tasks for a sprint and put them on postit notes. When you complete one, move it to another part of the wall. At first this seemed a bit silly to me and still does in a group setting, but the fundamental idea is sound. That is, having a visual representation of the amount of work left, and making that large enough to be unignorable.

I was thinking of having the home page of my browser point to some project site, or entering issues into a bug tracker, but I can ignore both of those if I try. Two huge bulletin boards covered in bright yellow notes however are harder to walk past. I think I should still keep a digital record of when tasks were completed, but I can do that with check in descriptions in my source control. Maybe a script to generate a nice page or something, but really keeping it simple is key here.

June 11th, 2011
After getting the game in its previous state with AI vs AI, I've run into an issue. Input with drag and drop looks to be complicated in my current setup. There are lots of considerations that have to be made with when the mouse is depressed, released, released outside, etc. I'll have to deal with these issues for buttons, but the constraints are much simpler in those cases.

My thought is to either move up implementation of the keyboard based selection, or avoid the subject of input until the next phase and centre the sprint around UI and relative positioning in AI v AI. It would be nice to prove that the game is playable in human v human or human v AI form and it would be something new to work on, but getting it to the level it was at is the main initial goal. The point of the first phase is pure porting, so implementing a new input system runs counter to that. I'm thinking I'll leave input til later.

June 12th, 2011
After creating the UI I've realized that manually laying out all of the items on screen in code is a literal hellscrape. I need to create a basic way to layout and render 2D elements like boxes and text. I have taken the "implement relative sizing" task to be a simple first run at a UI system. It will be by no means complete. Likely I'll use an XML file for the structure of the system at first, since it means I won't have to learn about custom content pipelines to do it. Later on a design will have to be done up for a fuller system and editor, because having to code even a simple UI is a nightmare.

June 18th, 2011
The port is done and a new version of the game is underway. I'll archive the current version, then start making large changes in the direction of a tactics game. The scale will shrink down to single squares for everything. Mines cause confusion because of the flipping back and forth between miners, and planes moving in a seperate chunk from the user is both nonfluid and a bit weird. I'm also thinking it would be cool if the miners could pick up mines and move them around to create perimeters. Also switch the turns to be more like a tactics game where you can move all of your units on a turn, and change the basic map to have fewer units. This will likely destroy the AI which is pretty bad currently anyway. I'll try to keep it servicable to test with.